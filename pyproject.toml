# SPDX-FileCopyrightText: 2022 Copyright DB InfraGO AG and the capellambse-context-diagrams contributors
# SPDX-License-Identifier: Apache-2.0

[build-system]
requires = ["setuptools>=64", "setuptools_scm[toml]>=3.4", "wheel"]
build-backend = "setuptools.build_meta"

[project]
dynamic = ["version"]

name = "capellambse-context-diagrams"
description = "Extension for py-capellambse that adds automatically generated context diagrams for arbitrary model elements."
readme = "README.md"
requires-python = ">=3.10,<3.14"
license = { text = "Apache-2.0" }
authors = [{ name = "DB InfraGO AG" }]
keywords = ["capella", "mbse", "context", "diagram", "automatic diagrams"]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: Apache Software License",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Other/Nonlisted Topic",
  "Topic :: Scientific/Engineering",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Typing :: Typed",
]
dependencies = [
  "capellambse>=0.6.6,<0.7",
  "typing_extensions",
  "pydantic>=2.7.3",
]

[project.urls]
Homepage = "https://github.com/DSD-DBS/capellambse-context-diagrams"
Documentation = "https://capellambse-context-diagrams.readthedocs.io"

[project.entry-points."capellambse.model_extensions"]
context_diagrams = "capellambse_context_diagrams:init"

[dependency-groups]
dev = [
  "coverage>=7.6.9",
  "ipykernel>=6.29.5",
  "pre-commit>=4.0.1",
  "pyls-isort>=0.2.2",
  "pylsp-mypy>=0.6.9",
  "pytest>=8.3.3",
  "python-lsp-server>=1.12.0",
  "requests-mock>=1.12.1",
  "ruff>=0.8.2",
]

docs = [
  "mkdocs-material",
  "mkdocstrings[python]>=0.18",
  "pytkdocs[numpy-style]>=0.5.0",
  "mkdocs-gen-files",
  "mkdocs-literate-nav",
  "mkdocs-section-index",
  "mkdocs-autorefs",
]

[tool.coverage.run]
branch = true
command_line = "-m pytest"
source = ["capellambse_context_diagrams"]

[tool.coverage.report]
exclude_also = [
  'if t\.TYPE_CHECKING:',
  'class .*\bt\.Protocol\):',
  '@abc\.abstractmethod',
  '@t\.overload',
]
skip_covered = true

[tool.docformatter]
wrap-descriptions = 72
wrap-summaries = 79

[tool.mypy]
check_untyped_defs = true
no_implicit_optional = true
show_error_codes = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_ignores = true
python_version = "3.11"

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_incomplete_defs = false
disallow_untyped_defs = false

[tool.pytest.ini_options]
addopts = """
  --strict-config
  --strict-markers
  --import-mode=importlib
  --tb=short
"""
testpaths = ["tests"]
xfail_strict = true
[tool.ruff]
line-length = 79

[tool.ruff.lint]
extend-select = [
  "ARG",    # flake8-unused-arguments
  "B",      # flake8-bugbear
  "C4",     # flake8-comprehensions
  "D",      # pydocstyle
  "D212",   # "Multi-line docstring summary should start at the first line"
  "D402",   # "First line should not be the functionâ€™s 'signature'"
  "D417",   # "Missing argument descriptions in the docstring"
  "DTZ",    # flake8-datetimez
  "ERA",    # eradicate
  "FA",     # flake8-future-annotations
  "FIX",    # flake8-fixme
  "FURB",   # refurb
  "G",      # flake8-logging-format
  "I",      # isort
  "ICN",    # flake8-import-conventions
  "ISC001", # "Implicitly concatenated string literals on one line"
  "ISC003", # "Explicitly concatenated string should be implicitly concatenated"
  "LOG",    # flake8-logging
  "PIE",    # flake8-pie
  "PL",     # pylint
  "PT",     # flake8-pytest-style
  "RET",    # flake8-return
  "RUF",    # ruff
  "SIM",    # flake8-simplify
  "TC005",  # "Found empty type-checking block"
  "T1",     # flake8-debugger
  "UP",     # pyupgrade
  "YTT",    # flake8-2020
]
extend-ignore = [
  "D1",      # Missing docstring in _
  "D201",    # No blank lines allowed before function docstring  # auto-formatting
  "D202",    # No blank lines allowed after function docstring  # auto-formatting
  "D203",    # 1 blank line required before class docstring  # auto-formatting
  "D204",    # 1 blank line required after class docstring  # auto-formatting
  "D211",    # No blank lines allowed before class docstring  # auto-formatting
  "D213",    # Multi-line docstring summary should start at the second line
  "DTZ001",  # `tzinfo=None` passed to `datetime.datetime()`
  "DTZ005",  # `tz=None` passed to `datetime.datetime.now()`
  "E402",    # Module level import not at top of file
  "F403",    # `from _ import *` used; unable to detect undefined names
  "F405",    # `_` may be undefined, or defined from star imports
  "PLC0414", # Import alias does not rename original package # used for explicit reexports
  "PLR0904", # Too many public methods
  "PLR0911", # Too many return statements
  "PLR0912", # Too many branches
  "PLR0913", # Too many arguments in function definition
  "PLR0914", # Too many local variables
  "PLR0915", # Too many statements
  "PLR0916", # Too many Boolean expressions
  "PLR0917", # Too many positional arguments
  "PLR2004", # Magic value used in comparison, consider replacing `_` with a constant variable
  "PLW0603", # Using the global statement to update `_` is discouraged
  "PLW2901", # `for` loop variable `_` overwritten by assignment target
  "RUF005",  # Consider iterable unpacking instead of concatenation  # false-positives with NamedTuple and overridden __add__ (i.e. Vector2D)
  "RUF018",  # Ignore assignment expression in `assert` statemtens
  "SIM108",  # Use ternary operator instead of `if`-`else`-block
]

[tool.ruff.lint.extend-per-file-ignores]
"__init__.py" = [
  "PLE0604", # Invalid object in `__all__`, must contain only strings  # false-positive when unpacking imported submodule __all__
]
"tests/test_*.py" = [
  "F811",    # Redefinition of unused `_` from line _
  "PLR2004", # Magic value used in comparison, consider replacing `_` with a constant variable
]

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = ["capellambse.diagram.Vector2D"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"
ignore-decorators = ["typing.overload"]

[tool.setuptools]
platforms = ["any"]
zip-safe = false

[tool.setuptools.package-data]
"*" = ["py.typed", "*.js"]

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools_scm]
# This section must exist for setuptools_scm to work
